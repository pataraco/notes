Jenkins
-------

# TO-DO
# -----
https://www.cloudbees.com/sites/default/files/cje-study-guide-2018.pdf
https://go.cloudbees.com/
https://go.cloudbees.com/training/index.html  (google)

# Docs
# ----
* https://jenkins.io/doc/
* Jenkins Handbook - https://jenkins.io/doc/book/
* https://stackoverflow.com/questions/tagged/jenkins

Done:
----
* Getting Started - https://jenkins.io/doc/pipeline/tour/getting-started/
* Creating your first Pipeline - https://jenkins.io/doc/pipeline/tour/hello-world/
* Running multiple steps - https://jenkins.io/doc/pipeline/tour/running-multiple-steps/
* Defining execution environments - https://jenkins.io/doc/pipeline/tour/agents/
* Using environment variables - https://jenkins.io/doc/pipeline/tour/environment/
* Recording tests and artifacts - https://jenkins.io/doc/pipeline/tour/tests-and-artifacts/
* Cleaning up and notifications - https://jenkins.io/doc/pipeline/tour/post/
* Deployment - https://jenkins.io/doc/pipeline/tour/deployment/

Next:
----
* Jenkins Handbook - https://jenkins.io/doc/book/

Re-Read:
-------

# Install
# -------
# required: Java 8
# Long Term Support (LTS)
# docker	# did NOT work
  # pull the official Jenkins image from the Docker repo
  $ docker pull jenkinsci/jenkins:lts	# did NOT work, could not find "lts" tag
  $ docker pull jenkinsci/jenkins	# worked
  # run a container running the image
  #  - map data directory from the container to the host (TO_HOST_DIR:FROM_CONTAINER_DIR)
  #  - expose port to host: CONTAINER_PORT EXPOSED_PORT
  $ docker run \
     -d -p $EXPOSED_PORT:$CONTAINER_PORT \
     -v $TO_HOST_DIR:$FROM_CONTAINER_DIR \
     -t jenkins/jenkins
# docker	# TODO: Try this!!!  (use jenkins/jenkin)
  $ docker run \
     -p 8080:8080 -p 50000:50000 \
     -v $$PWD/jenkins:/var/jenkins_home \
     jenkins/jenkins:lts
  $ docker exec -it $CONT_ID /usr/local/bin/install-plugins.sh $PLUG_INS
  $ http://$JENKINS_URL/safeRestart

  OR (build your own image)

  Dockerfile
  ---
  FROM jenkins/jenkins:lts
  COPY plugins.txt /usr/share/jenkins/ref/plugins.txt
  RUN /usr/local/bin/install-plugins.sh < /usr/share/jenkins/ref/plugins.txt
  ---
# linux					# <----- performed this one
  $ sudo wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo
  $ sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key
  $ yum install jenkins
# war					# tested - seemed to work fine
  $ wget http://mirrors.jenkins.io/war-stable/latest/jenkins.war
  $ java -jar jenkins.war
  $ http://localhost:8080		# follow instructions to finish install
# brew
  $ brew install jenkins

# Advance Jenkins installation: https://jenkins.io/doc/book/appendix/advanced-installation/
# - experimentation, staging or production
# - standalone or servlet in existing framework (Tomcat or Glassfish)

# stand alone Debian
wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
sudo apt-get update
sudo apt-get install jenkins

# Post Installation (Setup Wizard)
# - grab security token from log and use with "Setup Wizard" in Web UI
# - token also for admin default password
# - Setup wizard installs most common plugins

# Global Tool Configuration
---------------------------
JDK installations
- Add JDK
  JAVA_HOME: /Library/Java/JavaVirtualMachines/openjdk-12.0.1.jdk/Contents/Home
     OR    : /Library/Java/JavaVirtualMachines/jdk1.8.0_101.jdk/Contents/Home
Git installations
Path to Git executable: git
Maven installations
- Add Maven
  MAVEN_HOME: /usr/local/Cellar/maven/3.6.1

  

# Plug-In (recommended)
-----------------------
- Build Monitor View           # highly visible view of jobs statuses
- Job Configuration History    # Saves copies of job/system configs
- Job DSL                      # DSL programmatic creation of projects
- Throttle Concurrent Builds   # Throttles concurrent builds per node
- Timestamper                  # Adds timestamps to the Console Output
- Version Number               # Richer version numbers to be created and used
- Build Name Setter            # Sets build display name other than #1, #2, #3

# Files
# -------
# Jenkins Config File
/etc/sysconfig/jenkins		# Jenkins config
/var/lib/jenkins/config.xml	# Web UI config
/etc/init.d/jenkins		# start up script
/var/log/jenkins/jenkins.log	# log file
/etc/default/jenkins		# launch config parameters
/var/lib/jenkins/secrets/initialAdminPassword	# initial passsword location

/var/lib/jenkins/plugins
/usr/share/doc/jenkins
/usr/share/jenkins
/var/cache/jenkins
/run/jenkins
/etc/logrotate.d/jenkins
/var/lib/jenkins/workspace

# Jenkins File (Jenkinsfile)
# --------------------------
pipeline {
    agent any    /* where and how to execute the Pipeline, or subset thereof */
    /* agent { docker 'python:3.5.1' } *\
    environment {
        VAR = 'val'
    }
    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }
    stages {
        stage('Test') {
            steps {
                sh 'printenv'
            }
        }
        stage('Build') {
            steps {
            }
        }
        stage('Sanity check') {
            steps {
                input "Does the staging environment look ok?"
            }
        }
        stage('Deploy') {
            steps {
            }
        }
    }
    post {
        always {    /* this will always run */
            archive 'build/libs/**/*.jar'  /* grab built artifacts for local analysis/investigation */
            junit 'build/reports/**/*.xml' /* grab test results and let Jenkins track them */
        }
        success {    /* runs when successful */
            slackSend channel: '#ops-room',
                      color: 'good',
                      message: "The pipeline ${currentBuild.fullDisplayName} completed successfully."
            mail to: 'pataraco@gmail.com',
                 subject: "Jenkins: Executed Pipeline [SUCCESS]: ${currentBuild.fullDisplayName}",
                 body: "Ran: ${env.BUILD_URL}\nStatus: Succeeded\n"
        }
        unstable {    /* runs when marked as unstable */
        }
        failure {    /* runs if failed */
            mail to: 'pataraco@gmail.com',
                 subject: "Jenkins: Executed Pipeline [FAILED]: ${currentBuild.fullDisplayName}",
                 body: "Ran: ${env.BUILD_URL}\nStatus: Failed\n"
            hipchatSend room: 'DevOps Notifs'
                message: "Attention: Pipeline run [FAILED] @here \nJob name: ${env.JOB_NAME} - Job #: ${env.BUILD_NUMBER} has failed.",
                color: 'RED'
        }
        changed {    /* runs if state of Pipeline has changed, e.g. previously failed, but now succeeded */
        }
    }
}

tags: jenkins
