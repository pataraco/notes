-----------------
- Ansible Notes -
-----------------

Community: galaxy.ansible.com - Ansible Galaxy; hub for finding, reusing, and sharing the best Ansible content.

TODO
----
- learn about "local_action"

Installation
------------
- Latest Released - use package managers, otherwise use `pip`
	- Control Machine Requirements
		- Python 2.6/2.7
	  Install
		- AWS - create a RHEL instance	# ansible-control
		- change hostname
		- python 2.7.5 already installed
		- yum update
		- yum install git
		- git clone git://github.com/ansible/ansible.git --recursive
		- yum install wget
		- install EPEL repo (/etc/yum.repos.d/epel.repo)
			- wget https://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
			- rpm -Uvh epel-release-7-5.noarch.rpm
				OR
			- rpm -ivh https://dl.fedoraproject.org/pub/epel/7/x86_64/e/epel-release-7-5.noarch.rpm
		  From Source
			- cd ansible
			- source ./hacking/env-setup
			- source ./hacking/env-setup -q	# to suppress spurious warnings/errors
			- yum install python-pip (need EPEL repo)
			(NOT Complete)
		 >From package (needs EPEL)
			- yum install wget
			- yum install ansible
		  Build and install from package
			- cd ansible
			- make rpm
			(NOT Complete)
	- Managed Node Requirements
		- ssh (sftp or config to scp in ansible.cfg)
		- Python 2.4+ (< 2.5 need "python-simplejson")
		- libselinux-python (if SELinux enabled)

Getting Started
	First setup and commands
	- vi /etc/ansible/hosts
	- ansible all -m ping [-u user] [--sudo|-b [--become-user user]] [--private-key]
	- ansible all -a uptime
	- ansible all -a "echo hello world"
	Turn off Host Key Checking
	- vi /etc/ansible/ansible.cfg or ~/.ansible.cfg
	  [defaults]
	  host_key_checking = False
		OR
	- export ANSIBLE_HOST_KEY_CHECKING=False
Iventory
	/etc/ansible/hosts
		- host
		- [group]
		- host:port
		- alias ansible_port=PORT ansible_host=IP
		- www[01:50].example.com
		- db-[a:f].example.com
		- HOST	ansible_connection=local
		  HOST2	ansible_connection=ssh	ansible_user=USER
		- host1 http_port=80	maxRequestsPerChild=800
		  host2 http_port=303	maxRequestsPerChild=900
		- [GROUP]
		  host1
		  host2
		  [GROUP:vars]
		  ntp_server=ntp.example.com
		  proxy=proxy.example.com

Introduction to Ad-Hoc Commands
-------------------------------
	http://docs.ansible.com/ansible/intro_adhoc.html

	$ ansble <pattern> -m <module> -a <arguments>
		Patterns:
			all|*|GROUP|G1:G2|G1:!G2|G1:&G2|G1:G2:&G3:!G4|*.example.com|*.com:G
		 Index	GROUP[0]|GROUP[-1]|G[2:3]|G[:2]
		 RegEx	~(web|db).*\.example\.com	# regular exp
		 CLI	ansible --limit @these_hosts.txt
	$ ansible GROUP -a "/sbin/reboot" -f 10		# fork 10
	$ ansible GROUP -a "/sbin/reboot" -u USERNAME
	$ ansible GROUP -a "/sbin/reboot" -u USERNAME --become|-b [--ask-become-pass|-k]
	$ ansible GROUP -a "/sbin/reboot" -u USERNAME --become-user USERNAME [--ask-become-pass|-k]
	$ ansible HOSTS -m shell -a 'echo $TERM'
	$ ansible HOSTS -m copy -a "src=/etc/hosts dest=/tmp/hosts"
	$ ansible HOSTS -m file -a "dest=/etc/hosts mode=660 owner=USER group=GROUP"
	$ ansible HOSTS -m file -a "dest=/etc/ansible mode=775 owner=USER group=GROUP state=directory"
	$ ansible HOSTS -m file -a "dest=/etc/ansible state=absent"
	$ ansible webservers -m yum -a "name=acme state=present"	# pkg installed
	$ ansible webservers -m yum -a "name=acme-1.5 state=present"	# version of pkg installed
	$ ansible webservers -m yum -a "name=acme state=latest"		# lastest of pkg installed
	$ ansible webservers -m yum -a "name=acme state=absent"		# pkg NOT installed
	$ ansible all -m user -a "name=foo password=<crypted password here>"
	$ ansible all -m user -a "name=foo state=absent"
	$ ansible webservers -m git -a "repo=git://foo.example.org/repo.git dest=/srv/myapp version=HEAD"
	$ ansible webservers -m service -a "name=httpd state=started"
	$ ansible webservers -m service -a "name=httpd state=restarted"
	$ ansible webservers -m service -a "name=httpd state=stopped"
	$ ansible all|localhost -m setup
	$ ansible localhost -m shell -a '/bin/date' | awk '$5=="rc=0" {p="t"}; ($5=="rc=1" || $5=="rc=2") {p="f"}; p=="t" {print $0}'
	$ ansible -i hosts dev_local -K -b -m authorized_key -a  "user=root key=\"{{ lookup('file', '/path/to/.ssh/id_dsa.pub') }}\" state=present"
	$ ansible-vault decrypt encrypted --output=decrypted --vault-password-file=~/.vault.vmdev
	$ ansible-vault encrypt decrypted --output=encrypted --vault-password-file=~/.vault.vmdev

Playbooks
Roles
	roles/ROLE: files, templates, tasks, handlers, vars, defaults, meta (dependencies)

# run a command on a remote host
tasks:
  - shell: whoami; hostname
    register: whoami
    delegate_to: remotehost
    remote_user: someuser

Misc Commands
-------------

	$ ansible-doc MODULE		# RTFM about a module
	$ ansible-doc -l		# list of all installed modules
	$ ansible-playbook --list-tasks $PLAYBOOK
	$ ansible-playbook -vvv -i inventory/S3-Scanning/hosts_local playbooks/S3-Scanning/destroy_s3_scanning_vpc_and_stack.yml
	$ ansible-playbook -vvv -i inventory/S3-Scanning/hosts_local playbooks/S3-Scanning/create_s3_scanning_vpc_and_stack.yml
	$ ansible-playbook -vvv -i inventory/vagrant --private-key=~/.ssh/vagrant playbooks/util/manage_users.yml

######################################################################

--------- Ansible Tutorial Project ------------

EXAMPLES
--------

- name: print value of item using with_items
  debug: var=item
  with_items: "{{ secgrp.group_id }}"

MODULE REGISTERS		# the values of the returned registered variables
----------------
module: ec2_vpc:
register: vpc_created
ok: [localhost] => {
    "vpc_created": {
        "changed": true|false,
        "igw_id": "igw-d14c72b4",
        "subnets": [],
        "vpc": {
            "cidr_block": "10.150.0.0/16",
            "dhcp_options_id": "dopt-b9ec6bdc",
            "id": "vpc-07f95b63",
            "region": "us-west-2",
            "state": "pending|available"
        },
        "vpc_id": "vpc-07f95b63"
    }
}

module: ec2_vpc_igw:
register: igw_created
ok: [localhost] => {
    "igw_created": {
        "changed": true|false,
        "gateway_id": "igw-d14c72b4"
    }
}

module: ec2_vpc_subnet:
register: int_subnet_2a_created
ok: [localhost] => {
    "int_subnet_2a_created": {
        "changed": true|false,
        "subnet": {
            "availability_zone": "us-west-2a",
            "available_ip_address_count": 251,
            "cidr_block": "10.150.1.0/24",
            "default_for_az": "false",
            "id": "subnet-50fc5534",
            "map_public_ip_on_launch": "false",
            "state": "available",
            "tags": {
                "ChargeCode": "INT03 - IT/Operations",
                "Env": "dev",
                "Name": "sub-int-uw2a-raco",
                "VPCName": "vpc-raco"
            },
            "vpc_id": "vpc-07f95b63"
        }
    }
}

module: ec2_vpc_route_table:
register: int_rtbl_created
ok: [localhost] => {
    "int_rtbl_created": {
        "changed": true,
        "route_table": {
            "id": "rtb-d4b833b0",
            "routes": [
                {
                    "destination_cidr_block": "10.150.0.0/16",
                    "gateway_id": "local",
                    "instance_id": null,
                    "interface_id": null,
                    "origin": "CreateRouteTable",
                    "state": "active",
                    "vpc_peering_connection_id": null
                },
                {
                    "destination_cidr_block": "0.0.0.0/0",
                    "gateway_id": "igw-d14c72b4",
                    "instance_id": null,
                    "interface_id": null,
                    "origin": "CreateRoute",
                    "state": "active",
                    "vpc_peering_connection_id": null
                }
            ],
            "tags": {
                "ChargeCode": "INT03 - IT/Operations",
                "Env": "dev",
                "Name": "rtbl-internal-raco",
                "VPCName": "vpc-raco"
            },
            "vpc_id": "vpc-07f95b63"
        }
    }
}

module: ec2_vpc_route_table:
register: http_ext_secgrp_created
ok: [localhost] => {
    "http_ext_secgrp_created": {
        "changed": true,
        "group_id": "sg-95b589f2"
    }
}

module: ec2_vpc_route_table:
register: elb_created
ok: [localhost] => {
    "elb_created": {
        "ansible_facts": {
            "ec2_elb": "info"
        },
        "changed": true,
        "elb": {
            "app_cookie_policy": null,
            "connection_draining_timeout": 300,
            "cross_az_load_balancing": "yes",
            "dns_name": "elb-raco-353273861.us-west-2.elb.amazonaws.com",
            "health_check": {
                "healthy_threshold": 10,
                "interval": 30,
                "target": "HTTP:80/index.html",
                "timeout": 5,
                "unhealthy_threshold": 2
            },
            "hosted_zone_id": "Z33MTJ483KN6FU",
            "hosted_zone_name": "elb-raco-353273861.us-west-2.elb.amazonaws.com",
            "idle_timeout": 60,
            "in_service_count": 0,
            "instance_health": [],
            "instances": [],
            "lb_cookie_policy": null,
            "listeners": [
                [
                    80,
                    80,
                    "HTTP",
                    "HTTP"
                ]
            ],
            "name": "elb-raco",
            "out_of_service_count": 0,
            "region": "us-west-2",
            "scheme": "internet-facing",
            "security_group_ids": [
                "sg-95b589f2"
            ],
            "status": "created",
            "subnets": [
                "subnet-50fc5534",
                "subnet-887b66d1"
            ],
            "unknown_instance_state_count": 0,
            "zones": [
                "us-west-2a",
                "us-west-2c"
            ]
        }
    }
}

module: ec2_key:
register: key_created
ok: [localhost] => {
    "key_created": {
        "changed": true|false,
        "key": {
            "fingerprint": "bf:42:85:1b:41:a7:55:92:62:d2:ed:80:8c:c1:f4:50:1b:de:aa:ef",
            "name": "raco"
            "private_key": "-----BEGIN RSA PRIVATE KEY-----\naasflkaSBSDWR8243lfj\n...."
        }
    }
}

module: ec2_vpc_subnet_facts:
register: subnet_facts
    "subnet_facts": {
        "changed": false,
        "subnets": [
            {
                "availability_zone": "us-west-2b",
                "available_ip_address_count": 251,
                "cidr_block": "10.150.5.0/24",
                "default_for_az": "false",
                "id": "subnet-9b4ffaff",
                "map_public_ip_on_launch": "false",
                "state": "available",
                "tags": {
                    "ChargeCode": "INT03 - IT/Operations",
                    "Env": "dev",
                    "Name": "sub-int-uw2a-raco",
                    "VPCName": "vpc-raco"
                },
                "vpc_id": "vpc-51ef4635"
            }
        ]
    }
}

BUILT-IN VARIABLES
------------------
inventory_hostname_short
