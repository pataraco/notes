AWS Commands and Stuff

Install the AWS CLI Using pip

	With Python and pip installed, use pip to install the AWS CLI:
		$ sudo pip install awscli

	To upgrade an existing AWS CLI installation, use the --upgrade option:
		$ sudo pip install --upgrade awscli

TO-READ
   Continuous Integration:		http://aws.amazon.com/devops/continuous-integration/
   Continuous Delivery:			http://aws.amazon.com/devops/continuous-delivery/
   AWS CodePipeline:			https://aws.amazon.com/codepipeline/
   AWS CodePipeline Documentation:	https://aws.amazon.com/documentation/codepipeline/
   AWS CodeDeploy:			https://aws.amazon.com/codedeploy/
   AWS CodeDeploy Documentation:	https://aws.amazon.com/documentation/codedeploy/
   Continuous Delivery (Starter kit)	http://bit.ly/AWSCodeStarterKit

ENVIRONMENT
	use/set "AWS_DEFAULT_PROFILE" instead of "--profile" with CLI

TECHNOLOGIES
	* EC2
	* S3
	* Cloudfront
	* Glacier
	* VPC
	* Route 53
	* CodeCommit
	* CloudWatch
	* CloudFormation
	* Identity & Access Management (IAM)

COMMANDS
	# aws autoscaling delete-tags --region us-west-1 --tags ResourceId=raco-test-asg,ResourceType=auto-scaling-group,Key=MOP
	# aws --region us-west-1 autoscaling create-or-update-tags --tags ResourceId=raco-test-asg,ResourceType=auto-scaling-group,Key=MOP,Value=true,PropagateAtLaunch=true
[
	# ec2metadata
        # aws ec2 terminate-instances --region eu-west-1 --instance-ids i-027f25b22de9270c2
	# aws ec2 create-tags --resources $instanceID --tags Key=Creator,Value='DickButt'
	# aws ec2 delete-tags --resources $instanceID --tags Key=MOP
	# aws ec2 describe-images --image-ids ami-e54f5f84
	# aws ec2 describe-images --image-ids ami-bfc7848f|egrep 'VirtualizationType|ImageId|RootDeviceType|"Name'
	$ aws iam list-account-aliases	# also found on IAM dashboard
	$ aws route53 list-hosted-zones
	$ aws ec2 describe-tags --filters Name=resource-id,Values=i-5703388e --region us-west-2 --output=text
	$ aws codecommit create-repository --repository-name raco --repository-description "Raco's test repo" --region us-east-1
	$ aws codecommit delete-repository --repository-name raco --region us-east-1
	$ aws codecommit list-repositories --region us-east-1
        $ aws iam upload-ssh-public-key --user-name praco --output json --ssh-public-key-body SSH_PUB_KEY
	$ aws iam list-ssh-public-keys [--user-name praco]
 	$ aws iam get-ssh-public-key --ssh-public-key-id APKAJE6JPZ2K3KPTRYAQ --encoding SSH --user-name praco
	$ aws elb create-load-balancer-listeners --load-balancer-name elb-virtumedix-vm4 --listeners "Protocol=TCP,LoadBalancerPort=443,InstanceProtocol=tcp,InstancePort=443"
	$ aws sts assume-role --role-arn "arn:aws:iam::801178088653:role/ModifyMobileLocationStudioR53FromTeleComSys" --role-session-name "R53-Update" --output json
		$ export AWS_ACCESS_KEY_ID=ASIXXXXXXXGWWYCJMCFA
		$ export AWS_SECRET_ACCESS_KEY=Bz7CIXXXXXXX1bTwEtBm9JXXXXXXXeD
		$ export AWS_SECURITY_TOKEN=FQoDYXdzXXXXXXXiQGZY5B2MD+XXXXXXXZUFEqCDxB79wXXXXXXXXCM5pXXXXXX
	$ aws route53 list-resource-record-sets --hosted-zone-id Z3MWE1Z2JT5DNN
	$ aws route53 change-resource-record-sets --hosted-zone-id Z3MWE1Z2JT5DNN --change-batch file:///tmp/r53.add.json
	$ cat /tmp/r53.add.json
		{
		  "Comment": "testing ability to create",
		  "Changes": [
		    {
		      "Action": "CREATE",
		      "ResourceRecordSet": {
		        "Name": "testing-delete-me.mobile.location.studio",
		        "Type": "CNAME",
		        "TTL": 60,
		        "ResourceRecords": [
		          {
		            "Value": "some.bogus.domain.com"
		          }
		        ]
		      }
		    }
		  ]
		}
	$ aws ec2 describe-instances --region=eu-west-1 --filters "Name=tag:Project,Values=VMedix" "Name=tag:Env,Values=staging" --query "Reservations[].Instances[].[Tags[?Key=='Name'].Value|[0],PrivateIpAddress,InstanceId,Tags[?Key=='Env'].Value|[0],Tags[?Key=='Cluster'].Value|[0],State.Name]" --output table|egrep -v '^\+|DescribeInstances' | sort
	$ aws autoscaling describe-launch-configurations --launch-configuration-names '*blue*' --max-items 3 --query "LaunchConfigurations[].LaunchConfigurationName" --output table
	$ aws autoscaling describe-auto-scaling-groups --query "AutoScalingGroups[].[AutoScalingGroupName,Instances[].InstanceId|join(', ',@)]"  --region eu-west-1 --output table
	$ aws autoscaling describe-auto-scaling-groups --query AutoScalingGroups[].[AutoScalingGroupName,LoadBalancerNames] --output table --region eu-west-1

S3
	# bucket creation, bucket deletion, properties, policies, tags, website hosting, ARN
(CLI)	$ s3cmd|aws - cp, rm, sync, get, put, ls

IAM
	# user creation, policies, groups, MFA, keys, policy simulator, policy creator

Route 53
	
Key Management

AUTOSCALING

  /usr/local/bin/aws cloudwatch put-metric-data --dimensions webapp_type=${server_type} --namespace=R5 --metric-name=ScaleStatus --value 0
  /usr/local/bin/aws cloudwatch put-metric-data --dimensions webapp_type=${server_type} --namespace=R5 --metric-name=ScaleStatus --value 1
  /usr/local/bin/aws cloudwatch put-metric-data --dimensions webapp_type=${server_type} --namespace=R5 --metric-name=ScaleStatus --value 2
  
  read -a as_groups <<< \
  $(/usr/local/bin/aws autoscaling describe-auto-scaling-groups | \
    jsonpipe | grep '/AutoScalingGroups/.*/AutoScalingGroupName' | \
    sed -e 's/"//g' | awk '{print $2}')

	read -a as_groups <<< $(aws autoscaling describe-auto-scaling-groups | jsonpipe | grep '/AutoScalingGroups/.*/AutoScalingGroupName' | sed -e 's/"//g'|awk '{print $2}')
		- OR -
	read -a as_groups <<< $(aws autoscaling describe-auto-scaling-groups | grep AutoScalingGroupName | cut -d'"' -f4)
	
  read -a existing_alarms <<<  \
   $(printf "%s\ %s\n" $(/usr/local/bin/aws cloudwatch describe-alarms | \
     jsonpipe | grep '/MetricAlarms/.*/AlarmActions/' | sed -e 's/"//g' | \
     awk '{print $2" "$3}'))
	 
  for asg in ${as_groups[@]}; do  
    policyup=$(grep "autoScalingGroupName/$asg:policyName/Scale Up" \
             $tmp_file | awk '{print $2" Up"}' | sed -e 's/"//g')
    /usr/local/bin/aws cloudwatch put-metric-alarm --alarm-name Scale-up-${servertype} --alarm-actions "${policyup}" --metric-name ScaleStatus --namespace R5 --statistic Maximum --period 60 --evaluation-periods 2 --threshold 2 --comparison-operator GreaterThanOrEqualToThreshold --dimensions Name=webapp_type,Value=${servertype}
	  
    policydown=$(grep "autoScalingGroupName/$asg:policyName/Scale Down" \
             $tmp_file | awk '{print $2" Down"}' | sed -e 's/"//g')
    /usr/local/bin/aws cloudwatch put-metric-alarm --alarm-name Scale-down-${servertype} --alarm-actions "${policydown}" --metric-name ScaleStatus --namespace R5 --statistic Maximum --period 60 --evaluation-periods 2 --threshold 0 --comparison-operator LessThanOrEqualToThreshold --dimensions Name=webapp_type,Value=${servertype}
		  

 aws autoscaling suspend-processes --auto-scaling-group-name admin-asg --scaling-processes AlarmNotification
 aws autoscaling suspend-processes --auto-scaling-group-name admin-asg --scaling-processes AlarmNotification --profile $PROFILE
 
To suspend all Auto Scaling processes for the specified Auto Scaling group.
	$ aws autoscaling suspend-processes --auto-scaling-group-name <ASG_NAME> [--profile $PROFILE]

To suspend specific processes for the specified Auto Scaling group, use the --scaling-processes option:

If you suspend AlarmNotification, Auto Scaling does not automatically execute policies that would be triggered by an alarm (i.e. based on min/max settings).
	$ aws autoscaling suspend-processes --auto-scaling-group-name <ASG_NAME> --scaling-processes AlarmNotification [--profile <PROFILE>]

If you suspend Launch, Auto Scaling does not automatically add new EC2 instances to the group.
	$ aws autoscaling suspend-processes --auto-scaling-group-name <ASG_NAME> --scaling-processes Launch [--profile <PROFILE>]

If you suspend Terminate, Auto Scaling does not automatically remove EC2 instances from the group.
	$ aws autoscaling suspend-processes --auto-scaling-group-name <ASG_NAME> --scaling-processes Terminate [--profile <PROFILE>]

If you suspend ReplaceUnhealthy, Auto Scaling does not automatically terminate EC2 instances marked as unhealthy from the group and subsequently create new instances to replace them.
	$ aws autoscaling suspend-processes --auto-scaling-group-name <ASG_NAME> --scaling-processes ReplaceUnhealthy [--profile <PROFILE>]
 
To resume all Auto Scaling processes for a specified Auto Scaling group
	$ aws autoscaling resume-processes --auto-scaling-group-name <ASG_NAME> [--profile <PROFILE>]

To resume specific processes for the specified Auto Scaling group, use the --scaling-processes option as above, for example, to resume just the AlarmNotificaion process use the following:
	$ aws autoscaling resume-processes --auto-scaling-group-name <ASG_NAME> --scaling-processes AlarmNotification [--profile <PROFILE>]

Additional Information (Links)
	Auto Scaling Documentation
		aws.amazon.com/documentation/autoscaling
	Suspend and Resume Auto Scaling Processes
		docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/US_SuspendResume.html
 
aws autoscaling suspend-processes --auto-scaling-group-name my-asg
aws autoscaling resume-processes --auto-scaling-group-name my-asg
 
Turn ALL ASGs processes off
	for asgn in $(aws --profile dtu autoscaling describe-auto-scaling-groups | grep AutoScalingGroupName | cut -d'"' -f4); do echo $asgn ; aws --profile dtu autoscaling suspend-processes --auto-scaling-group-name $asgn; done
Turn ALL ASGs processes on
	for asgn in $(aws --profile dtu autoscaling describe-auto-scaling-groups | grep AutoScalingGroupName | cut -d'"' -f4); do echo $asgn ; aws --profile dtu autoscaling resume-processes --auto-scaling-group-name $asgn; done

# process of replacing launch configs
	# 1. create a new launch configuraton with temp "Copy" name
	aws autoscaling create-launch-configuration --launch-configuration-name LC-NAME-COPY --image-id ami-UID --security-groups sg-UID1 sg-UID2 --key-name KEY_NAME --instance-type c3.large --user-data file://all-userdata/NEW_user_data.txt
	# 2. update the ASG to use the new temp "Copy" launch configuration
	aws autoscaling update-auto-scaling-group --auto-scaling-group-name ASG-NAME --launch-configuration-name LC-NAME-COPY
	# 3. delete the old launch configuration
	aws autoscaling delete-launch-configuration --launch-configuration-name ORIG-LC-NAME
	# 4. create the new launch config with correct name
	aws autoscaling create-launch-configuration --launch-configuration-name ORIG-LC-NAME --image-id ami-UID --security-groups sg-UID1 sg-UID2 --key-name KEY_NAME --instance-type c3.large --user-data file://all-userdata/NEW_user_data.txt
	# 5. update the ASG to use the launch configuration with the correct name
	aws autoscaling update-auto-scaling-group --auto-scaling-group-name ASG-NAME --launch-configuration-name ORIG-LC-NAME
	# 6. delete the temp "Copy" launch configuration
	aws autoscaling delete-launch-configuration --launch-configuration-name LC-NAME-COPY

	# Example
	aws autoscaling create-launch-configuration --region us-east-1 --launch-configuration-name lc-VMedix-app-nginx-blue-COPY --image-id ami-be8f61a8 --key-name ops.pem --security-groups sg-289f984d sg-857b41e0 sg-a07b41c5 sg-b37b41d6 --user-data file:///tmp/app_nginx_user_data-new.txt --instance-type m3.large --iam-instance-profile ec2-restricted-access --no-associate-public-ip-address --placement-tenancy dedicated
	aws autoscaling update-auto-scaling-group --region us-east-1 --auto-scaling-group-name asg-VMedix-app-nginx-blue --launch-configuration-name lc-VMedix-app-nginx-blue-COPY
	aws autoscaling delete-launch-configuration --region us-east-1 --launch-configuration-name lc-VMedix-app-nginx-blue
	aws autoscaling create-launch-configuration --region us-east-1 --launch-configuration-name lc-VMedix-app-nginx-blue --image-id ami-be8f61a8 --key-name ops.pem --security-groups sg-289f984d sg-857b41e0 sg-a07b41c5 sg-b37b41d6 --user-data file:///tmp/app_nginx_user_data-new.txt --instance-type m3.large --iam-instance-profile ec2-restricted-access --no-associate-public-ip-address --placement-tenancy dedicated
	aws autoscaling update-auto-scaling-group --region us-east-1 --auto-scaling-group-name asg-VMedix-app-nginx-blue --launch-configuration-name lc-VMedix-app-nginx-blue
	aws autoscaling delete-launch-configuration --region us-east-1 --launch-configuration-name lc-VMedix-app-nginx-blue-COPY


# Examples
aws autoscaling describe-auto-scaling-groups --profile dtu
aws autoscaling describe-auto-scaling-groups --profile dtu|grep AutoScalingGroupName
aws autoscaling describe-launch-configurations|egrep "LaunchConfigurationName|ami-9587ada5"


Initial setup of config file (~/.aws/config)
	$ aws configure
	(the option "--profile $PROFILE" matches the profile names in ~/.aws/config)
	(or use/set AWS_DEFAULT_PROFILE environment variable)
 
Additional Documetation
	http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-welcome.html
	http://docs.aws.amazon.com/cli/latest/userguide/cli-chap-getting-started.html


Additional Commands
---------- --------
$ aws [command] [sub-command ] help				# Help
$ aws --version							# version information
$ aws s3 ls [--profile <PROFILE>]				# list data buckets
$ aws s3 ls s3://<BUCKET_NAME> [--profile <PROFILE>]		# list contents of a data bucket
$ aws s3 cp s3://<BUCKET_NAME>/<FILE> [--profile <PROFILE>]	# copy file from bucket to .
$ aws s3 sync --profile ptu s3://firefall-stabilization-build-1298-publictest/ /data/1298-download
$ aws s3 sync --profile corsother --exclude \* --include repodata\* s3://tcs-yum-repos/amzn/noarch/data/ s3://vmedix-yum-repo/amzn/noarch/data/
$ aws s3 sync --profile corsother --exclude \* --include VirtuMedix\* s3://tcs-yum-repos/amzn/noarch/data/ s3://vmedix-yum-repo/amzn/noarch/data/
$ aws s3 cp --acl public-read baby2002.html s3://tcs-location-studio/index2.html
$ s3cmd cp --acl-public|-P public-read baby2002.html s3://tcs-location-studio/index2.html

Glossary
--------
AMI - Amazon Machine Image (AMI) provides the information required to launch an instance
EBS	- Elastic Block Storage

EBS Volume - remote storage devices
Instance Store Volume - virtual devices, physically attached to host - can only be attached as the instance is launched - 

-------------- AMI's --------------------
ami_ebs	ami-d1f308a6 Ubuntu 12.04.4 LTS (Precise Pangolin)            eu-west-1 64-bit ebs Launch ami-d1f308a6 ec2-run-instances ami-d1f308a6 -t t1.micro --region eu-west-1 --key ${EC2_KEYPAIR_EU_WEST_1}
ami_hvm ami-60a10117 Ubuntu 12.04.5 LTS (Precise Pangolin) [20140927] eu-west-1 64-bit hvm Launch ami-60a10117 ec2-run-instances ami-60a10117 -t m3.medium --region eu-west-1 --key ${EC2_KEYPAIR_EU_WEST_1}
ami_gss ami-903686e7 Ubuntu 14.04.1 LTS (Trusty Tahr)                 eu-west-1 64-bit ebs Launch ami-903686e7 ec2-run-instances ami-903686e7 -t t1.micro --region eu-west-1 --key ${EC2_KEYPAIR_EU_WEST_1}

tags: aws
